lesson_name("Premiers modules et facts")
make_and_go_ws
clear_ws
run(`cp /tutorials/files/step-1-2/hosts hosts`)

"`Communication avec les noeuds`"

"Prêt à commencer ? "

"Commençons par jouer avec la commande vue dans la leçon précédente : `ansible`. C'est une première commande parmi d'autres que Ansible fournit pour interagir avec les noeuds à gérer."

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Faire quelque chose d'utile`"

"Dans l'exemple de la leçon précédente `-m ping` désigne l'usage du module `ping`. Ce module est des nombreux modules disponbibles avec Ansible."

"Ce module `ping` est très simple. Il ne demande aucun argument. On peut passer des arguments aux modules via l'option `-a` de la ligne de commande. Voyons quelques exemples d'autres modules."

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"Module `Shell`"

"Ce module vous permet d'exécuter n'importe qu'elle commande shell sur l'hôte distant."

"Veuillez exécuter *ansible -i hosts -m shell -a 'uname -a' host0.example.org*"

prompt {
    if success && command == "ansible -i hosts -m shell -a 'uname -a' host0.example.org" {
    	expect ("ansible -i hosts -m shell -a 'uname -a' host0.example.org")
        "Facile !"
        "Le prochain module est le module `copy`."
        break
    }
}

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"Module `Copy`"

"Sans surprise ce module permet de réaliser la copie d'un fichier de la machine de contrôle et le noeud distant. Imaginons que nous voulions copier notre fichier `/etc/motd` dans le dossier /tmp` de l'hôte distant. Veuillez exécuter cette commande :"

"*ansible -i hosts -m copy -a 'src=/etc/motd dest=/tmp/' host0.example.org*"

prompt {
    if success && command == "ansible -i hosts -m copy -a 'src=/etc/motd dest=/tmp/' host0.example.org" {
    	expect ("ansible -i hosts -m copy -a 'src=/etc/motd dest=/tmp/' host0.example.org")
        "Veuillez vérifier la sortie."
        break
    }
}

"Ansible (plus précisément le module `copy` exécuté sur le noeud distant) nous rend toute une série d'informations utiles dans le format JSON. Nous verrons plus loin comment utiliser ce format."

"Nous allons maintenant aborder d'autres modules utiles. Ansible propose une très longue liste de modules (plusieurs centaines) qui permettent pratiquement tout faire sur un système."

"On trouvera une documentation des modules sur Internet : `http://docs.ansible.com/ansible/latest/list_of_all_modules.html`; mais on peut aussi utiliser la commande `ansible-doc -l` pour lister les modules et, la commande `ansible-doc ping` pour afficher directement la commande du module ping."



"If you can't find the right module, writing one is pretty easy (it doesn't even have to be Python, it just needs to speak JSON)."

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Many hosts, same command`"

"Ok, the above stuff is fun, but we have many nodes to manage. Let's try that on other hosts too."

"Lets say we want to get some facts about the node, and, for instance, know which Ubuntu version we have deployed on nodes, it's pretty easy. Please run the following:"

"*ansible -i hosts -m shell -a 'grep DISTRIB_RELEASE /etc/lsb-release' all*"

prompt {
    if success && command == "ansible -i hosts -m shell -a 'grep DISTRIB_RELEASE /etc/lsb-release' all" {
    	expect ("ansible -i hosts -m shell -a 'grep DISTRIB_RELEASE /etc/lsb-release' all")
        "`all` is a shortcut meaning `all hosts found in inventory file`"
        break
    }
}

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Many more facts`"

"That was easy. However, It would quickly become cumbersome if we wanted more information (ip addresses, RAM size, etc...). The solution comes from another really handy module (weirdly) called `setup`: it specializes in node's `facts` gathering."

"Try it out:"

"*ansible -i hosts -m setup host0.example.org*"

prompt {
    if success && command == "ansible -i hosts -m setup host0.example.org" {
    	expect ("ansible -i hosts -m setup host0.example.org")
        "Replied with lots of information"
        break
    }
}

"You may also filter returned keys, in case you're looking for something specific."

"For instance, let's say you want to know how much memory you have on all your hosts, easy. Please run the following:"

"*ansible -i hosts -m setup -a 'filter=ansible_memtotal_mb' all*"

prompt {
    if success && command == "ansible -i hosts -m setup -a 'filter=ansible_memtotal_mb' all" {
    	expect ("ansible -i hosts -m setup -a 'filter=ansible_memtotal_mb' all")
        "Notice that hosts may reply in different order compared to the previous output. This is because ansible parallelizes communications with hosts!"
        break
    }
}

"BTW, when using the setup module, you can use `*` in the `filter=` expression. It will act like a shell glob"

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Selecting hosts`"

"We saw that `all` means 'all hosts', but ansible provides a lot of other ways to select hosts: `http://docs.ansible.com/ansible/latest/intro_patterns.html`"

"- `host0.example.org:host1.example.org` would run on host0.example.org and host1.example.org"

"- `host*.example.org` would run on all hosts starting with 'host' and ending with '.example.org' (just like a shell glob too)"

"There are other ways that involve groups, we'll see that in the next lesson."

"This is the end of this lesson!"

"Veuillez presser la touche \"`Enter`/`Entrée`\" pour continuer"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}
